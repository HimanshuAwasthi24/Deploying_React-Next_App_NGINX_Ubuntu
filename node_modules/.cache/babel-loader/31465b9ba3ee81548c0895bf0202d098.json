{"ast":null,"code":"var _jsxFileName = \"/home/orange/Desktop/To-Do-App-in-React-JS/src/Components/Form.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport './Form.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nlet Form = Props => {\n  _s();\n\n  let [Text, setText] = useState('');\n\n  let HandleInput = Inp => {\n    setText(Inp);\n  };\n\n  let HandleClick = () => {\n    Text === '' ? alert(\"Text Filed Can't Be Empty\") : Props.Take(Text);\n    setText('');\n  };\n\n  useEffect(() => {\n    setText(Props.String);\n  }, [Props.String]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Form\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter any To Do ...\",\n      value: Text,\n      onChange: Event => {\n        HandleInput(Event.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Plus\",\n      onClick: () => {\n        HandleClick();\n      },\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: Props.Icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Form, \"//W4VJtG2viGr1LSb7f36991RNE=\");\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["useEffect","useState","Form","Props","Text","setText","HandleInput","Inp","HandleClick","alert","Take","String","Event","target","value","Icon"],"sources":["/home/orange/Desktop/To-Do-App-in-React-JS/src/Components/Form.js"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport './Form.css'\n\nlet Form=(Props)=>\n{\n    let [Text,setText]=useState('');\n    let HandleInput=(Inp)=>\n    {\n        setText(Inp);\n    }\n    let HandleClick=()=>\n    {\n        Text===''?alert(\"Text Filed Can't Be Empty\"):Props.Take(Text)\n        setText('');\n    }\n    useEffect(() => {\n        setText(Props.String)\n    }, [Props.String])\n    \n    return(\n        <div className=\"Form\">\n            <input type=\"text\" placeholder='Enter any To Do ...' value={Text} onChange={(Event)=>{HandleInput(Event.target.value)}}/>\n            <div className='Plus' onClick={()=>{HandleClick()}}>\n                <i className={Props.Icon} ></i>\n            </div>\n        </div>\n    )\n}\n\nexport default Form"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAO,YAAP;;;AAEA,IAAIC,IAAI,GAAEC,KAAD,IACT;EAAA;;EACI,IAAI,CAACC,IAAD,EAAMC,OAAN,IAAeJ,QAAQ,CAAC,EAAD,CAA3B;;EACA,IAAIK,WAAW,GAAEC,GAAD,IAChB;IACIF,OAAO,CAACE,GAAD,CAAP;EACH,CAHD;;EAIA,IAAIC,WAAW,GAAC,MAChB;IACIJ,IAAI,KAAG,EAAP,GAAUK,KAAK,CAAC,2BAAD,CAAf,GAA6CN,KAAK,CAACO,IAAN,CAAWN,IAAX,CAA7C;IACAC,OAAO,CAAC,EAAD,CAAP;EACH,CAJD;;EAKAL,SAAS,CAAC,MAAM;IACZK,OAAO,CAACF,KAAK,CAACQ,MAAP,CAAP;EACH,CAFQ,EAEN,CAACR,KAAK,CAACQ,MAAP,CAFM,CAAT;EAIA,oBACI;IAAK,SAAS,EAAC,MAAf;IAAA,wBACI;MAAO,IAAI,EAAC,MAAZ;MAAmB,WAAW,EAAC,qBAA/B;MAAqD,KAAK,EAAEP,IAA5D;MAAkE,QAAQ,EAAGQ,KAAD,IAAS;QAACN,WAAW,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAX;MAAgC;IAAtH;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAK,SAAS,EAAC,MAAf;MAAsB,OAAO,EAAE,MAAI;QAACN,WAAW;MAAG,CAAlD;MAAA,uBACI;QAAG,SAAS,EAAEL,KAAK,CAACY;MAApB;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QAFJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAQH,CAxBD;;GAAIb,I;;KAAAA,I;AA0BJ,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}